from src.keyboards.reply_keyboards import ReplyKeyboards
from src.utils.bot_data import BotData
from src.utils.user_data import UserData


class CommandHandler:
    # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ parse_mode='HTML'

    def __init__(self, bot):
        self.bot = bot

    def start(self, message):
        start_msg = ("<b>–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã GPT, —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏, –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏. –°–ø–∏—Å–æ–∫ "
                 "–∫–æ–º–∞–Ω–¥ —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥. –í—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –ø—Ä–µ—Å–µ—Ç –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞\n"
                 "\n"
                 "/start - —Ä–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞\n"
                 "/create - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç\n"
                 "/remove - —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ—Å–µ—Ç\n"
                 "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
                 "/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>")

        reply_markup = ReplyKeyboards.get_user_presets_keyboard(message.chat.id)
        self.bot.send_message(message.chat.id, start_msg, parse_mode='HTML', reply_markup=reply_markup)

    def history(self, message):
        userdata = UserData(message.from_user.id)
        cfg = userdata.config.load()
        history_enabled = cfg["gpt_history_enabled"]
        if history_enabled:
            history_status_msg = '<b>üî¥ –ò—Å—Ç–æ—Ä–∏—è GPT <u>–≤—ã–∫–ª—é—á–µ–Ω–∞</u>!</b>'
            cfg["gpt_history_enabled"] = False
        else:
            history_status_msg = '<b>üü¢ –ò—Å—Ç–æ—Ä–∏—è GPT –±—ã–ª–∞ <u>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</u>!</b>'
            cfg["gpt_history_enabled"] = True
        userdata.config.write(cfg)
        self.bot.send_message(message.chat.id, history_status_msg, parse_mode='HTML')

    def create(self, message):
        enter_preset_name_msg = "<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞ GPT</b>"
        self.bot.send_message(message.chat.id, enter_preset_name_msg, parse_mode='HTML')
        self.bot.register_next_step_handler(message, self._preset_name_input)

    def _preset_name_input(self, message):
        name = message.text
        if not self._validate_preset_name(user_id=message.from_user.id,preset_name=name):
            invalid_data_msg = "<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø—Ä–µ—Å–µ—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>"
            self.bot.send_message(message.chat.id, invalid_data_msg, parse_mode='HTML')
            self.bot.register_next_step_handler(message, self._preset_name_input)
            return

        if len(name) > 25:
            name = name[0:25]

        enter_instruction_msg = f"<b>–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞</b>"
        self.bot.send_message(message.chat.id, enter_instruction_msg, parse_mode='HTML')
        self.bot.register_next_step_handler(message, self._preset_instruction_input, name)

    def _preset_instruction_input(self, message, name):
        if self._is_command(message.text) or self._is_button(message.text, message.from_user.id):
            invalid_data_msg = "<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>"
            self.bot.send_message(message.chat.id, invalid_data_msg, parse_mode='HTML')
            self.bot.register_next_step_handler(message, self._preset_instruction_input, name)
            return

        userdata = UserData(message.chat.id)
        gpt_presets = userdata.gpt_presets.load()
        gpt_presets.append({"name": name, "instruction": message.text})
        userdata.gpt_presets.write(gpt_presets)
        success_msg = f"<b>–ü—Ä–µ—Å–µ—Ç <code>{name}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –º–µ–Ω—é</b>"
        repl_markup = ReplyKeyboards.get_user_presets_keyboard(message.from_user.id)
        self.bot.send_message(message.chat.id, success_msg, parse_mode='HTML', reply_markup=repl_markup)

    def remove(self, message):
        userdata = UserData(message.chat.id)
        active_preset_name = userdata.config.load()["gpt_active_preset"]
        if not active_preset_name:
            no_preset_msg = "<b>–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ—Å–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–µ—Å–µ—Ç –≤ –º–µ–Ω—é, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b>"
            self.bot.send_message(message.chat.id, no_preset_msg, parse_mode='HTML')
        else:
            presets_list = userdata.gpt_presets.load()
            for i in range(len(presets_list)):
                if presets_list[i]["name"] == active_preset_name:
                    presets_list.pop(i)
                    userdata.gpt_presets.write(presets_list)
                    cfg = userdata.config.load()
                    cfg["gpt_active_preset"] = None
                    userdata.config.write(cfg)
                    break
            preset_deleted_msg = f"<b>–ü—Ä–µ—Å–µ—Ç <code>{active_preset_name}</code> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>"
            repl_markup = ReplyKeyboards.get_user_presets_keyboard(message.from_user.id)
            self.bot.send_message(message.chat.id, preset_deleted_msg, parse_mode='HTML', reply_markup=repl_markup)

    def help(self, message):
        help_msg = ("<b><u>C–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</u></b>\n\n"
                    "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ GPT –ø—Ä–µ—Å–µ—Ç—ã —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ "
                    "–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏.\n\n"
                    "–í –±–æ—Ç–µ –µ—Å—Ç—å –¥–≤–∞ –º–µ–Ω—é, –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é –ø—Ä–µ—Å–µ—Ç–æ–≤. –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞, —Ç–∞–º "
                    "–≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –î–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ "
                    "–∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞.\n\n"
                    "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create\n"
                    "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –≤ –º–µ–Ω—é, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove\n"
                    "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history\n")
        self.bot.send_message(message.chat.id, help_msg, parse_mode='HTML')

    def stats(self, message):
        stats_dict = UserData(message.from_user.id).stats.load()
        stats_data = ''
        for key, value in stats_dict.items():
            stats_data += f"{key}: {value}\n"
        stats_msg = f"<b><u>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</u></b>\n" + stats_data
        self.bot.send_message(message.chat.id, stats_msg, parse_mode='HTML')

    @staticmethod
    def _is_command(text):
        if text[0] == '/':
            return True
        return False

    @staticmethod
    def _is_button(text, user_id):
        if text[0:2] == BotData.ACTIVE_STATUS_STR:
            text = text[2:]
        preset_names = [preset["name"] for preset in UserData(user_id).gpt_presets.load()]
        if text in preset_names:
            return True
        return False

    @staticmethod
    def _validate_preset_name(*, user_id, preset_name):
        if preset_name[0:2] == BotData.ACTIVE_STATUS_STR:
            preset_name = preset_name[2:]
        if preset_name[0] == '/':
            return False
        preset_names = [preset["name"] for preset in UserData(user_id).gpt_presets.load()]
        if preset_name in preset_names:
            return False
        return True


    def register_handlers(self):
        self.bot.message_handler(commands=['start'])(self.start)
        self.bot.message_handler(commands=['history'])(self.history)
        self.bot.message_handler(commands=['create'])(self.create)
        self.bot.message_handler(commands=['remove'])(self.remove)
        self.bot.message_handler(commands=['help'])(self.help)
        self.bot.message_handler(commands=['stats'])(self.stats)